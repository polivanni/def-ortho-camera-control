local application_utility = require "ortho_control.application_utility"
local mobile_zoomer = require "ortho_control.camera.zoomers.mobile_zoomer.mobile_zoomer"
local null_zoomer = require "ortho_control.camera.zoomers.null_zoomer"
local desktop_zoomer = require "ortho_control.camera.zoomers.desktop_zoomer.desktop_zoomer"

go.property("camera_id", msg.url("camera"))
go.property("min_camera_zoom", 0.3)
go.property("max_camera_zoom", 2)
go.property("zoom_delta", 0.01)

go.property("input_touch", hash "touch")
go.property("input_touch_multi", hash "touch_multi")
go.property("input_mouse_wheel_up", hash "mouse_wheel_up")
go.property("input_mouse_wheel_down", hash "mouse_wheel_down")

go.property("constraints_bottom_left", vmath.vector3(0))
go.property("constraints_top_right", vmath.vector3(0))

---@class ortho_control.camera_mode_move
---@field zoomer ortho_control.camera_zoomer
---@field mode_active boolean

---@param self ortho_control.camera_mode_move
function on_input(self, action_id, action)
	self.zoomer:on_input(action_id, action)
end

---@param self ortho_control.camera_mode_move
function on_message(self, message_id, message, sender)
	self.zoomer:on_message(message_id, message, sender)
end

---@param self ortho_control.camera_mode_move
function update(self, dt)
	self.zoomer:on_update(dt)
end

---@return ortho_control.camera_zoomer
local function create_current_zoomer(self)
	local camera_id = self.camera_id
	assert(camera_id, "camera id is not provided")

	---@class ortho_control.action_table
	local action_table = {
		touch = self.input_touch,
		touch_multi = self.input_touch_multi,
		mouse_wheel_up = self.input_mouse_wheel_up,
		mouse_wheel_down = self.input_mouse_wheel_down,
	}

	---@class ortho_control.constraints
	---@field botton_left vector3
	---@field top_right vector3
	local constraints = {
		botton_left = self.constraints_bottom_left,
		top_right = self.constraints_top_right,
	}

	camera_id = hash(camera_id.path)
	local zoomer
	local sys_name = application_utility.get_system_name()
	if sys_name == application_utility.ANDROID or sys_name == application_utility.IPHONE_OS then
		zoomer = mobile_zoomer.create(camera_id, self.min_camera_zoom, self.max_camera_zoom, self.zoom_delta, action_table, constraints)
	elseif sys_name == application_utility.WINDOWS or sys_name == application_utility.LINUX or sys_name == application_utility.DANWIN then
		zoomer = desktop_zoomer.create(camera_id, self.min_camera_zoom, self.max_camera_zoom, self.zoom_delta, action_table, constraints)
	else
		zoomer = null_zoomer.create()
	end

	return zoomer
end

function init(self)
	msg.post(".", "acquire_input_focus")
	self.zoomer = create_current_zoomer(self)
end

function final(self)
	self.zoomer:final()
end
